import random
import numpy as np

class AdaptiveTicTacToe:
    def _init_(self):
        self.board = [' '] * 9
        self.player_strategies = {
            'human': [],
            'ai': []
        }
    
    def display_board(self):
        for i in range(0, 9, 3):
            print(f" {self.board[i]} | {self.board[i+1]} | {self.board[i+2]} ")
            if i < 6:
                print("---+---+---")
    
    def is_winner(self, player):
        # Unique winning condition checks
        winning_combos = [
            [0,1,2], [3,4,5], [6,7,8],  # Rows
            [0,3,6], [1,4,7], [2,5,8],  # Columns
            [0,4,8], [2,4,6]  # Diagonals
        ]
        return any(all(self.board[i] == player for i in combo) for combo in winning_combos)
    
    def get_empty_cells(self):
        return [i for i, cell in enumerate(self.board) if cell == ' ']
    
    def is_board_full(self):
        return ' ' not in self.board
    
    def strategic_move(self):
        # Advanced strategic move selection
        empty_cells = self.get_empty_cells()
        
        # Strategic center and corner preferences
        strategic_positions = [4, 0, 2, 6, 8, 1, 3, 5, 7]
        
        for pos in strategic_positions:
            if pos in empty_cells:
                return pos
        
        return random.choice(empty_cells)
    
    def play_game(self):
        current_player = random.choice(['X', 'O'])
        
        while True:
            self.display_board()
            
            if current_player == 'X':
                # Human Player
                try:
                    move = int(input("Enter your move (0-8): "))
                    if move not in range(9) or self.board[move] != ' ':
                        print("Invalid move. Try again.")
                        continue
                except ValueError:
                    print("Please enter a valid number.")
                    continue
            else:
                # AI Player
                move = self.strategic_move()
            
            self.board[move] = current_player
            
            if self.is_winner(current_player):
                self.display_board()
                print(f"{current_player} wins!")
                break
            
            if self.is_board_full():
                self.display_board()
                print("It's a draw!")
                break
            
            current_player = 'O' if current_player == 'X' else 'X'

def main():
    print("Welcome to Strategic Tic-Tac-Toe!")
    game = AdaptiveTicTacToe()
    game.play_game()

if _name_ == "_main_":
    main()
